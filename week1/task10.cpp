//
//  week2task10
//
//  У каждого из нас есть повторяющиеся ежемесячные дела, каждое из которых нужно выполнять в конкретный день каждого месяца:
//  оплата счетов за электричество, абонентская плата за связь и пр. Вам нужно реализовать работу со списком таких дел на месяц,
//  а именно, реализовать набор следующих операций:
//  ADD i s Назначить дело с названием s на день i текущего месяца.
//  DUMP i Вывести все дела, запланированные на день i текущего месяца.
//  NEXT Перейти к списку дел на новый месяц. При выполнении данной команды вместо текущего (старого) списка дел на текущий месяц создаётся
//  и становится активным (новый) список дел на следующий месяц: все дела со старого списка дел копируются в новый список.
//  После выполнения данной команды новый список дел и следующий месяц становятся текущими, а работа со старым списком дел прекращается.
//  При переходе к новому месяцу необходимо обратить внимание на разное количество дней в месяцах:
//  если следующий месяц имеет больше дней, чем текущий, «дополнительные» дни необходимо оставить пустыми (не содержащими дел);
//  если следующий месяц имеет меньше дней, чем текущий, дела со всех «лишних» дней необходимо переместить на последний день следующего месяца.
//  Замечания
/// Историю списков дел хранить не требуется, работа ведется только с текущим списком дел текущего месяца.
//  Более того, при создании списка дел на следующий месяц, он «перетирает» предыдущий список.
//  Обратите внимание, что количество команд NEXT в общей последовательности команд при работе со списком дел может превышать 11.
//  Начальным текущим месяцем считается январь.
//  Количества дней в месяцах соответствуют Григорианскому календарю с той лишь разницей, что в феврале всегда 28 дней.
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <math.h>
using namespace std;

void Add(vector<vector<string>>& list, int i, string plan){
    list[i-1].push_back(plan);
}

void Dump(vector<vector<string>>& list, int i){
    cout<<list[i-1].size()<<" ";
    if(list[i-1].size() != 0){
        for(int k = 0; k< list[i-1].size(); ++k){
            cout<<list[i-1][k]<<" ";
        }
    }
    cout<<endl;
}

void Next(vector<vector<string>>& list, int i){
    if(list.size() == i){
        list = list;
    }
    else if(list.size() > i){
        vector<vector<string>> tmp;
        for(int k = 0; k<i; ++k){
            tmp.push_back(list[k]);
        }
        vector<string> last;
        for(int k = i; k<list.size(); ++k){
            for(int j = 0; j<list[k].size(); ++j)
                last.push_back(list[k][j]);
        }
        for(int j = 0; j<last.size(); ++j){
            tmp[i-1].push_back(last[j]);
        }
        list = tmp;
    }
    else if(list.size() < i){
        list.resize(i);
    }
}

int main(){
    vector<int> days_im_month = {31,28,31,30,31,30,31,31,30,31,30,31};
    int n = days_im_month[0];
    int m = 0;
    vector<vector<string>> list(n);
    int Q = 0;
    cin>>Q;
    for(int k = 0; k<Q; ++k){
        string s;
        int i ;
        string plan;
        cin>>s;
        if(s == "ADD"){
            cin>>i>>plan;
            Add(list,i, plan);
            
        }
        else if(s =="DUMP"){
            cin>>i;
            Dump(list, i);
        }
        else if(s == "NEXT"){
            ++m;
            n = days_im_month[m];
            Next(list,n);
          //  cout<<"month: "<<m+1<<" "<<"days: "<<n<<endl;
            if((m+1)%12==0){
                m = -1;
            }
            
        }
    }
    return 0;
}
